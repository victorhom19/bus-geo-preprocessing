"""initial

Revision ID: eeaa3a688e32
Revises: 
Create Date: 2025-05-31 20:26:42.293522

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'eeaa3a688e32'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clustering_data',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('routes',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('source', sa.Enum('local', 'osm', name='bus_data_source', create_constraint=True), nullable=False),
    sa.Column('external_source_id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('final_stop_order', sa.Integer(), nullable=False),
    sa.CheckConstraint('final_stop_order >= 0', name='final_stop_order_constraint'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('speed_data',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stops',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('source', sa.Enum('local', 'osm', name='bus_data_source', create_constraint=True), nullable=False),
    sa.Column('external_source_id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('lat', sa.Float(), nullable=False),
    sa.Column('lon', sa.Float(), nullable=False),
    sa.CheckConstraint('-180 <= lon and lon <= 180', name='lon_constraint'),
    sa.CheckConstraint('-90 <= lat and lat <= 90', name='lat_constraint'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clustering_profiles',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('clustering_data_id', sa.Uuid(), nullable=False),
    sa.Column('clustering_params', sa.JSON(), nullable=False),
    sa.Column('clusters_count', sa.Integer(), nullable=False),
    sa.Column('clustering_score', sa.Float(), nullable=False),
    sa.CheckConstraint('0 <= clustering_score and clustering_score <= 1', name='clustering_score_constraint'),
    sa.CheckConstraint('clusters_count >= 0', name='clusters_count_constraint'),
    sa.ForeignKeyConstraint(['clustering_data_id'], ['clustering_data.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('route_geometry_nodes',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('node_order', sa.Integer(), nullable=False),
    sa.Column('lat', sa.Float(), nullable=False),
    sa.Column('lon', sa.Float(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('obstacle_type', sa.Enum('crossing', 'traffic_signals', 'speedbump', 'roundabout', name='obstacle_type', create_constraint=True), nullable=True),
    sa.Column('corresponding_stop_id', sa.Uuid(), nullable=True),
    sa.CheckConstraint('-180 <= lon and lon <= 180', name='lon_constraint'),
    sa.CheckConstraint('-90 <= lat and lat <= 90', name='lat_constraint'),
    sa.CheckConstraint('node_order >= 0', name='node_order_constraint'),
    sa.ForeignKeyConstraint(['corresponding_stop_id'], ['stops.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('route_segments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('stop_from_id', sa.Uuid(), nullable=False),
    sa.Column('stop_to_id', sa.Uuid(), nullable=False),
    sa.Column('segment_order', sa.Integer(), nullable=False),
    sa.Column('distance', sa.Float(), nullable=False),
    sa.Column('crossings', sa.Integer(), nullable=False),
    sa.Column('traffic_signals', sa.Integer(), nullable=False),
    sa.Column('speedbumps', sa.Integer(), nullable=False),
    sa.Column('roundabouts', sa.Integer(), nullable=False),
    sa.CheckConstraint('crossings >= 0', name='crossings_constraint'),
    sa.CheckConstraint('distance >= 0', name='distance_constraint'),
    sa.CheckConstraint('roundabouts >= 0', name='roundabouts_constraint'),
    sa.CheckConstraint('segment_order >= 0', name='segment_order_constraint'),
    sa.CheckConstraint('speedbumps >= 0', name='speedbumps_constraint'),
    sa.CheckConstraint('stop_from_id != stop_to_id', name='stops_constraint'),
    sa.CheckConstraint('traffic_signals >= 0', name='traffic_signals_constraint'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stop_from_id'], ['stops.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stop_to_id'], ['stops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('routes_stops',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('stop_id', sa.Uuid(), nullable=False),
    sa.Column('stop_order', sa.Integer(), nullable=False),
    sa.CheckConstraint('stop_order >= 0', name='stop_order_constraint'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stop_id'], ['stops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('speed_profiles',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('speed_data_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['speed_data_id'], ['speed_data.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clustering_anchors',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('clustering_profile_id', sa.Uuid(), nullable=False),
    sa.Column('lat', sa.Float(), nullable=False),
    sa.Column('lon', sa.Float(), nullable=False),
    sa.Column('cluster_index', sa.Integer(), nullable=False),
    sa.CheckConstraint('-180 <= lon and lon <= 180', name='lon_constraint'),
    sa.CheckConstraint('-90 <= lat and lat <= 90', name='lat_constraint'),
    sa.CheckConstraint('cluster_index >= 0', name='cluster_index_constraint'),
    sa.ForeignKeyConstraint(['clustering_profile_id'], ['clustering_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clustering_correspondences',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('clustering_profile_id', sa.Uuid(), nullable=False),
    sa.Column('cluster_from_index', sa.Integer(), nullable=False),
    sa.Column('cluster_to_index', sa.Integer(), nullable=False),
    sa.Column('weekday', sa.Integer(), nullable=False),
    sa.Column('hour_interval', sa.Integer(), nullable=False),
    sa.Column('transitions', sa.Float(), nullable=False),
    sa.CheckConstraint('0 <= hour_interval and hour_interval <= 23', name='hour_interval_constraint'),
    sa.CheckConstraint('0 <= weekday and weekday <= 6', name='weekday_constraint'),
    sa.CheckConstraint('cluster_from_index >= 0 and cluster_to_index >= 0', name='cluster_index_constraint'),
    sa.CheckConstraint('transitions >= 0', name='transitions_count_constraint'),
    sa.ForeignKeyConstraint(['clustering_profile_id'], ['clustering_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clustering_stops',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('clustering_profile_id', sa.Uuid(), nullable=False),
    sa.Column('stop_id', sa.Uuid(), nullable=False),
    sa.Column('cluster_index', sa.Integer(), nullable=False),
    sa.CheckConstraint('cluster_index >= 0', name='cluster_index_constraint'),
    sa.ForeignKeyConstraint(['clustering_profile_id'], ['clustering_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stop_id'], ['stops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('segments_speeds',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('weekday', sa.Integer(), nullable=False),
    sa.Column('hour_interval', sa.Integer(), nullable=False),
    sa.Column('speed_profile_id', sa.Uuid(), nullable=False),
    sa.Column('route_segment_id', sa.Uuid(), nullable=False),
    sa.Column('segment_order', sa.Integer(), nullable=False),
    sa.Column('speed', sa.Float(), nullable=False),
    sa.CheckConstraint('0 <= hour_interval and hour_interval <= 23', name='hour_interval_constraint'),
    sa.CheckConstraint('0 <= weekday and weekday <= 6', name='weekday_constraint'),
    sa.CheckConstraint('segment_order >= 0', name='segment_order_constraint'),
    sa.CheckConstraint('speed >= 0', name='speed_constraint'),
    sa.ForeignKeyConstraint(['route_segment_id'], ['route_segments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['speed_profile_id'], ['speed_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('segments_speeds')
    op.drop_table('clustering_stops')
    op.drop_table('clustering_correspondences')
    op.drop_table('clustering_anchors')
    op.drop_table('speed_profiles')
    op.drop_table('routes_stops')
    op.drop_table('route_segments')
    op.drop_table('route_geometry_nodes')
    op.drop_table('clustering_profiles')
    op.drop_table('stops')
    op.drop_table('speed_data')
    op.drop_table('routes')
    op.drop_table('clustering_data')
    # ### end Alembic commands ###
    sa.Enum('local', 'osm', name='bus_data_source').drop(op.get_bind())
    sa.Enum('crossing', 'traffic_signals', 'speedbump', 'roundabout', name='obstacle_type').drop(op.get_bind())
